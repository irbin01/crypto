blockchain = []


def get_last_blockchain_value():
    """ return last value of current bloackchain"""

    if len(blockchain) < 1:
        return None
    return blockchain[-1]


def add_transaction(transaction_amount, last_transaction=[1]):
    """
    Append new and last value

    Arguments:
        :transaction_amount
        :last_transaction
    """
    if last_transaction == None:
        last_transaction = [1]
    blockchain.append([last_transaction, transaction_amount])


def get_transaction_value():
    return float(input('Your transaction please: '))


def get_user_choice():
    user_choice = input("User choice: ")
    return user_choice


def print_bloackchain_elements():
    for block in blockchain:
        print("outputting block")
        print(block)


# tx_amount = get_transaction_value()
# add_value(tx_amount)
def verify_chain():
    block_index = 0
    is_valid = True
    for block in blockchain:
        if block_index == 0:
            block_index += 1
            continue
        elif block[0] == blockchain[block_index - 1]:
            is_valid = True
        else:
            is_valid = False
            break
        block_index += 1
    return is_valid


while True:
    print("Please choose")
    print("1: Add new value")
    print("2: Output The blockchain blocks")
    print('q : Quit')
    user_input = get_user_choice()
    if user_input == '1':
        tx_amount = get_transaction_value()
        add_transaction(tx_amount, get_last_blockchain_value())
    elif user_input == '2':
        print_bloackchain_elements()
    elif user_input == 'h':
        if len(blockchain) >= 1:
            blockchain[0] = [2]
    elif user_input == 'q':
        print_bloackchain_elements()
        break
    else:
        print("please enter valid choice")
    if not verify_chain():
        print("invalid blockchain")
        break

print('Done!')
